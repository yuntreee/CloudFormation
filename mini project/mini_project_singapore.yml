Parameters: 
  KeyName:
    Description: key 
    Type: AWS::EC2::KeyPair::KeyName

Resources:
# -------------------VPC 생성--------------------#
# Seoul-VPC
  AWSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.3.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Singapore-AWS-VPC

# AWS DHCP Option
  AWSDHCP:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainNameServers:
       - 10.4.1.200
       - 8.8.8.8

  AWSDHCPAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref AWSDHCP
      VpcId: !Ref AWSVPC

# IDC-VPC
  IDCVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.4.0.0/16
      EnableDnsHostnames: false
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Singapore-IDC-VPC

# IDC DHCP Option
  IDCDHCP:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainNameServers:
       - 10.4.1.200
       - 8.8.8.8

  IDCDHCPAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref IDCDHCP
      VpcId: !Ref IDCVPC

#-------------------서브넷 생성------------------#
# Singapore-AWS Subnets
  AWSSN1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.3.1.0/24
      VpcId: !Ref AWSVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AWS-Public-SN1

  AWSSN3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.3.3.0/24
      VpcId: !Ref AWSVPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AWS-Private-SN1

  AWSSN4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.3.4.0/24
      VpcId: !Ref AWSVPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AWS-Private-SN2

  AWSTGWSN1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.3.5.0/24
      VpcId: !Ref AWSVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AWS-TGW-SN1

  AWSTGWSN2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.3.6.0/24
      VpcId: !Ref AWSVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AWS-TGW-SN2

# Singapore-IDC Subnet
  IDCSN:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.4.1.0/24
      VpcId: !Ref IDCVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: IDC-Public-SN

#---------------IGW 생성/연결---------------#
# AWS-VPC IGW
  AWSIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AWS-IGW

# AWS-IGW
  AWSIGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref AWSIGW
      VpcId: !Ref AWSVPC

# IDC-VPC IGW
  IDCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IDC-IGW

# IDC-IGW
  IDCIGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IDCIGW
      VpcId: !Ref IDCVPC

#----------RT 생성, 서브넷 연결, IGW 라우팅 추가----------#
# RT for SN1
  AWSRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: AWS-RT-1
      VpcId: !Ref AWSVPC 

  AWSRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSRT1
      SubnetId: !Ref AWSSN1

  AWSDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSIGWAttach
    Properties:
      RouteTableId: !Ref AWSRT1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AWSIGW

# RT for SN3
  AWSRT3:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: AWS-RT-3
      VpcId: !Ref AWSVPC

  AWSRTAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSRT3
      SubnetId: !Ref AWSSN3

  AWSRT3NATRoute:
    Type: AWS::EC2::Route
    DependsOn: AWSIGWAttach
    Properties:
      RouteTableId: !Ref AWSRT3
      DestinationCidrBlock: 0.0.0.0/0
      NetworkInterfaceId: !Ref NATInstanceENI1

# RT for SN3
  AWSRT4:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: AWS-RT-4
      VpcId: !Ref AWSVPC

  AWSRTAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSRT4
      SubnetId: !Ref AWSSN4

# RT for SN5,6
  AWSRT56:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: AWS-RT-56
      VpcId: !Ref AWSVPC 

  AWSRTAssociation5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSRT56
      SubnetId: !Ref AWSTGWSN1

  AWSRTAssociation6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AWSRT56
      SubnetId: !Ref AWSTGWSN2

# RT for IDC SN
  IDCRT:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: IDC-RT
      VpcId: !Ref IDCVPC 

  IDCRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IDCRT
      SubnetId: !Ref IDCSN  

  IDCDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: IDCIGWAttach
    Properties:
      RouteTableId: !Ref IDCRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IDCIGW

#------------------ 보안그룹 ------------------#
  AWSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWS-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 0.0.0.0/0

      - IpProtocol: udp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 0.0.0.0/0

      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      
      Tags:
        - Key: Name
          Value: AWS-SG
      VpcId: !Ref AWSVPC

  IDCSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: IDC-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 0.0.0.0/0

      - IpProtocol: udp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 0.0.0.0/0

      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      
      Tags:
        - Key: Name
          Value: IDC-SG
      VpcId: !Ref IDCVPC

#------------------- Instance -------------------#
# NAT Instance 1
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATInstanceENI1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: "NAT Instance ENI 1"
      GroupSet: 
        - !Ref AWSSG
      PrivateIpAddress: 10.3.1.100
      SourceDestCheck: false
      SubnetId: !Ref AWSSN1
      Tags:
        - Key: Name
          Value: NAT-Instance-ENI-1

  AssociateEIP1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      NetworkInterfaceId: !Ref NATInstanceENI1

  NATInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0003ce8d47722ef67
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref NATInstanceENI1
      UserData:
        Fn::Base64: |
          #! /bin/bash
          hostname Singapore-NAT-Instance-1
          yum -y update
      Tags:
        - Key: Name
          Value: NAT-Instance-1

# WEB 1
  WebInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-073998ba87e205747
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref AWSSN3
          GroupSet: 
            - !Ref AWSSG
          PrivateIpAddress: 10.3.3.100
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl set-hostname Singaore-WEB-1
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
            
            yum -y update
            yum -y install httpd
            yum -y install php*
            echo "This is Singapore-WEB1" > /var/www/html/index.html
            systemctl enable --now httpd
      Tags:
        - Key: Name
          Value: WEB-Instance-1

# IDC DNS Server
  IDCDNSSRV:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-073998ba87e205747
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        # eth 0
        - DeviceIndex: 0
          SubnetId: !Ref IDCSN
          GroupSet: 
            - !Ref IDCSG
          # 고정 사설IP
          PrivateIpAddress: 10.4.1.200
      Tags:
        - Key: Name
          Value: IDC-DNS-SRV
      UserData:
        Fn::Base64:
          !Sub |
            #! /bin/bash
            hostnamectl set-hostname Singapore-DNS-SRV
            yun update -y
            yum install -y bind bind-utils bind-libs

            sed -i "s/listen-on port 53 { 127.0.0.1; };/listen-on port 53 { any; };/g" /etc/named.conf
            sed -i "s/allow-query     { localhost; };/allow-query     { any; };/g"  /etc/named.conf
            sed -i "s/dnssec-enable yes;/dnssec-enable no;/g" /etc/named.conf
            sed -i "s/dnssec-validation yes;/dnssec-validation no;/g" /etc/named.conf

            cat <<EOF> /etc/named.rfc1912.zones
            zone "idcsingapore.internal" IN {
              type master;
              file "idcsingapore.zone";
            };

            zone "awssingapore.internal" IN {
              type forward;
              forward only;
              forwarders { 10.3.3.250; 10.3.4.250; };
            };

            zone "awsseoul.internal" IN {
              type forward;
              forward only;
              forwarders { 10.1.3.250; 10.1.4.250; };
            };

            zone "idcseoul.internal" IN {
              type forward;
              forward only;
              forwarders { 10.2.1.200; };
            };

            EOF

            cat <<EOF> /var/named/idcsingapore.zone
            \$TTL 1D
            @ IN SOA ns.idcsingapore.internal. admin.idcsingapore.internal. (
                    20211002 1D 1H 1W 3H )
                    IN  NS  ns.idcsingapore.com.
            ns      IN  A   10.4.1.200
            dnssrv  IN  A   10.4.1.200
            dbsrv   IN  A   10.4.1.100
            EOF

            systemctl enable --now named

# IDC DB Server
  IDCDBSRV:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-073998ba87e205747
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        # eth 0
        - DeviceIndex: 0
          SubnetId: !Ref IDCSN
          GroupSet:
            - !Ref IDCSG
          # 고정 사설IP
          PrivateIpAddress: 10.4.1.100
      Tags:
        - Key: Name
          Value: IDC-DB-SRV
      UserData:
        Fn::Base64:
          !Sub |
            #! /bin/bash
            hostnamectl set-hostname Singapore-DB-SRV
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart

            yum install -y mariadb-server mariadb
            systemctl enable --now mariadb

# CGW Instance
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  IDCCGWENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: "IDC-CGW-ENI"
      GroupSet: 
        - !Ref IDCSG
      PrivateIpAddress: 10.4.1.10
      SourceDestCheck: false
      SubnetId: !Ref IDCSN
      Tags:
        - Key: Name
          Value: IDC-CGW-ENI

  AssociateEIP2:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      NetworkInterfaceId: !Ref IDCCGWENI

  IDCCGW:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-073998ba87e205747
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref IDCCGWENI
      Tags:
        - Key: Name
          Value: IDC-CGW
      UserData:
        Fn::Base64: |
          #!/bin/bash
          hostnamectl --static set-hostname Singapore-IDC-CGW
          yum -y update
          yum -y install tcpdump openswan
          cat <<EOF>> /etc/sysctl.conf
          net.ipv4.ip_forward=1
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.send_redirects = 0
          net.ipv4.conf.default.send_redirects = 0
          net.ipv4.conf.eth0.send_redirects = 0
          net.ipv4.conf.default.accept_redirects = 0
          net.ipv4.conf.eth0.accept_redirects = 0
          net.ipv4.conf.ip_vti0.rp_filter = 0
          net.ipv4.conf.eth0.rp_filter = 0
          net.ipv4.conf.default.rp_filter = 0
          net.ipv4.conf.all.rp_filter = 0
          EOF
          sysctl -p /etc/sysctl.conf
          curl -o /etc/ipsec.d/vpnconfig.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter8/8_lab_vpnconfig_singapore.sh
          chmod +x /etc/ipsec.d/vpnconfig.sh

# CGW
  CustomerGW:
    Type: AWS::EC2::CustomerGateway
    Properties:
      BgpAsn: 6500
      IpAddress: !Ref EIP2
      Tags:
        - Key: Name
          Value: Customer-GW
      Type: ipsec.1

#--------------------- Route 53 ---------------------#
# 프라이빗 호스팅 영역 생성
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: awssingapore.internal
      VPCs:
        - VPCId: !Ref AWSVPC
          VPCRegion: !Ref AWS::Region

# 웹으로 라우팅 생성
  WEB1Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: websrv1.awssingapore.internal
      ResourceRecords: 
        - 10.3.3.100
      Type: A
      TTL: 300

# 인바운드 엔드포인트
  InboundEndpoint:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: INBOUND
      IpAddresses:
        - Ip: 10.3.3.250
          SubnetId: !Ref AWSSN3
        - Ip: 10.3.4.250
          SubnetId: !Ref AWSSN4
      Name: Inbound Endpoint
      SecurityGroupIds:
        - !Ref AWSSG

# 아웃바운드 엔드포인트
  OutboundEndpoint:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: OUTBOUND
      IpAddresses:
        - Ip: 10.3.3.251
          SubnetId: !Ref AWSSN3
        - Ip: 10.3.4.251
          SubnetId: !Ref AWSSN4
      Name: Outbound Endpoint
      SecurityGroupIds:
        - !Ref AWSSG

# 아웃바운드 규칙
  OutboundRule:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      DomainName: idcsingapore.internal
      Name: Outbound Rule
      ResolverEndpointId: !Ref OutboundEndpoint
      RuleType: FORWARD
      TargetIps:
        - Ip: 10.4.1.200
          Port: 53

# 아웃바운드 규칙 VPC 연결
  OutboundRuleAssociation:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      ResolverRuleId: !Ref OutboundRule
      VPCId: !Ref AWSVPC

#---------------------- Transit Gateway - VPN ----------------------#
  TGW:
    Type: AWS::EC2::TransitGateway
    Properties:
      Tags:
       - Key: Name
         Value: TGW

  TGWAttach:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref AWSTGWSN1
        - !Ref AWSTGWSN2
      Tags:
        - Key: Name
          Value: AWS-TGW-Attach
      TransitGatewayId: !Ref TGW
      VpcId: !Ref AWSVPC         

  AWSTGWRoute1:
    Type: AWS::EC2::Route
    DependsOn: TGWAttach
    Properties:
      DestinationCidrBlock: 10.0.0.0/8
      RouteTableId: !Ref AWSRT3
      TransitGatewayId: !Ref TGW

  AWSTGWRoute2:
    Type: AWS::EC2::Route
    DependsOn: TGWAttach
    Properties:
      DestinationCidrBlock: 10.0.0.0/8
      RouteTableId: !Ref AWSRT4
      TransitGatewayId: !Ref TGW      

  IDCCGWRoute:
    Type: AWS::EC2::Route
    DependsOn: IDCCGW
    Properties:
      RouteTableId: !Ref IDCRT
      DestinationCidrBlock: 10.0.0.0/8
      InstanceId: !Ref IDCCGW      

  VPCAWSVPNConnection:
    Type: AWS::EC2::VPNConnection
    Properties:
      Type: ipsec.1
      StaticRoutesOnly: true
      CustomerGatewayId: !Ref CustomerGW
      TransitGatewayId: !Ref TGW
      VpnTunnelOptionsSpecifications:
        - PreSharedKey: cloudneta
      Tags:
        - Key: Name
          Value: AWS-VPNConnection-IDC      

# IDC-CGW에서 VPN 연결 후 적용
  TGWVPNStaticRoute:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: 10.4.0.0/16
      TransitGatewayAttachmentId: tgw-attach-06e1ddafdd8c98a1f
      TransitGatewayRouteTableId: tgw-rtb-0696d5469e3b7d5b1


# -------------------- VPC Peering --------------------#
  TGWPeeringStaticRoute1:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: 10.1.0.0/16
      TransitGatewayAttachmentId: tgw-attach-0edb6d6ea1f9d1721
      TransitGatewayRouteTableId: tgw-rtb-0696d5469e3b7d5b1

  TGWPeeringStaticRoute2:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: 10.2.0.0/16
      TransitGatewayAttachmentId: tgw-attach-0edb6d6ea1f9d1721
      TransitGatewayRouteTableId: tgw-rtb-0696d5469e3b7d5b1