Parameters: 
  KeyName:
    Description: key 
    Type: AWS::EC2::KeyPair::KeyName

Resources:
# VPC 0
  VPC0:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPC0

# VPC1
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPC1

# VPC2
  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.20.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPC2

# VPC0 서브넷
  VPC0SN1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC0
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: VPC0-SN1

  VPC0SN2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC0
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: VPC0-SN2

  VPC0SN3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC0
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC0-SN3 

  VPC0SN4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.4.0/24
      VpcId: !Ref VPC0
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC0-SN4

# VPC1 서브넷
  VPC1SN1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.10.1.0/24
      VpcId: !Ref VPC1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC1-SN1

  VPC1SN2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.10.2.0/24
      VpcId: !Ref VPC1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC1-SN2

  VPC1SN3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.10.3.0/24
      VpcId: !Ref VPC1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC1-SN3

  VPC1SN4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.10.4.0/24
      VpcId: !Ref VPC1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC1-SN4

# VPC2 서브넷
  VPC2SN1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.20.1.0/24
      VpcId: !Ref VPC2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC2-SN1

  VPC2SN2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.20.2.0/24
      VpcId: !Ref VPC2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC2-SN2

  VPC2SN3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.20.3.0/24
      VpcId: !Ref VPC2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC2-SN3

  VPC2SN4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.20.4.0/24
      VpcId: !Ref VPC2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: VPC2-SN4

# VPC0 GW
  VPC0IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC0-IGW

  VPC0IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VPC0IGW
      VpcId: !Ref VPC0

# VPC0 RT
  VPC0RT1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: VPC0-RT1
      VpcId: !Ref VPC0 

  VPC0RT2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: VPC0-RT2
      VpcId: !Ref VPC0 

  VPC0RT1Association1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC0RT1
      SubnetId: !Ref VPC0SN1 

  VPC0RT1Association2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC0RT1
      SubnetId: !Ref VPC0SN2

  VPC0RT1DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: VPC0IGWAttach
    Properties:
      RouteTableId: !Ref VPC0RT1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPC0IGW

  VPC0RT2Association1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC0RT2
      SubnetId: !Ref VPC0SN3

  VPC0RT2Association2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC0RT2
      SubnetId: !Ref VPC0SN4

# VPC1 RT
  VPC1RT1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: VPC1-RT1
      VpcId: !Ref VPC1 

  VPC1RT2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: VPC1-RT2
      VpcId: !Ref VPC1

  VPC1RT1Association1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RT1
      SubnetId: !Ref VPC1SN1 

  VPC1RT1Association2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RT1
      SubnetId: !Ref VPC1SN2

  VPC1RT2Association1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RT2
      SubnetId: !Ref VPC1SN3

  VPC1RT2Association2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RT2
      SubnetId: !Ref VPC1SN4

# VPC2 RT
  VPC2RT1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: VPC2-RT1
      VpcId: !Ref VPC2 

  VPC2RT2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: VPC2-RT2
      VpcId: !Ref VPC2 

  VPC2RT1Association1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2RT1
      SubnetId: !Ref VPC2SN1 

  VPC2RT1Association2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2RT1
      SubnetId: !Ref VPC2SN2

  VPC2RT2Association1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2RT2
      SubnetId: !Ref VPC2SN3

  VPC2RT2Association2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2RT2
      SubnetId: !Ref VPC2SN4


# VPC0 SG
  VPC0InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC0-Instance-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '3128'
        ToPort: '3128'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      
      Tags:
        - Key: Name
          Value: VPC0-Instance-SG
      VpcId: !Ref VPC0 

  VPC0EndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC0-Endpoint-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      
      Tags:
        - Key: Name
          Value: VPC0-Endpoint-SG
      VpcId: !Ref VPC0 

  VPC1SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC1-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      
      Tags:
        - Key: Name
          Value: VPC1-SG
      VpcId: !Ref VPC1 

  VPC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC2-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

      - IpProtocol: icmp
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      
      Tags:
        - Key: Name
          Value: VPC2-SG
      VpcId: !Ref VPC2 

# VPC0 Web Proxy Server
  VPC0WebProxy:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0bd7691bf6470fe9c
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        # eth 0
        - DeviceIndex: 0
          SubnetId: !Ref VPC0SN1
          GroupSet: 
            - !Ref VPC0InstanceSG
          PrivateIpAddress: 10.0.1.10
      Tags:
        - Key: Name
          Value: VPC0-Web-Proxy
      UserData:
        Fn::Base64:
          !Sub |
            #! /bin/bash
            hostnamectl set-hostname VPC0-Web-Proxy
            yum install -y tcpdump squid
            cat <<EOT> /etc/squid/squid.conf
            http_port 3128
            acl all src 0.0.0.0/0
            http_access allow all
            http_access deny all
            EOT
            systemctl start squid && systemctl enable squid
            cat <<EOT> /home/ec2-user/list.txt
            10.0.1.10
            10.10.1.10
            10.10.2.10
            10.20.1.10
            10.20.2.10
            EOT
            yum install httpd -y
            systemctl start httpd && systemctl enable httpd
            echo "<h1>TGW Lab - MgMt Server1</h1>" > /var/www/html/index.html
            curl -o /home/ec2-user/pingall.sh https://cloudneta-book.s3.ap-northeast-2.amazonaws.com/chapter6/pingall.sh --silent
            cp /home/ec2-user/pingall.sh /var/www/html/pingall.sh
            cp /home/ec2-user/list.txt /var/www/html/list.txt
            chmod +x /home/ec2-user/pingall.sh

# VPC1 Private EC2 1
  VPC1Private1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:  ami-08c64544f5cfcddd0
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        # eth 0
        - DeviceIndex: 0
          SubnetId: !Ref VPC1SN1
          GroupSet: 
            - !Ref VPC1SG
          PrivateIpAddress: 10.10.1.10
      Tags:
        - Key: Name
          Value: VPC1-EC2-1
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
            hostnamectl set-hostname VPC1-Private1

            cat <<EOT>> /etc/bashrc
            export http_proxy=http://10.0.1.10:3128
            export https_proxy=https://10.0.1.10:3128
            no_proxy=127.0.0.1,localhost,169.254.169.254,10.0.0.0/8,.internal
            EOT

            source /etc/bashrc

# VPC1 Private EC2 2
  VPC1Private2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:  ami-08c64544f5cfcddd0
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        # eth 0
        - DeviceIndex: 0
          SubnetId: !Ref VPC1SN2
          GroupSet: 
            - !Ref VPC1SG
          PrivateIpAddress: 10.10.2.10
      Tags:
        - Key: Name
          Value: VPC1-EC2-2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
            hostnamectl set-hostname VPC1-Private2

            cat <<EOT>> /etc/bashrc
            export http_proxy=http://10.0.1.10:3128
            export https_proxy=https://10.0.1.10:3128
            no_proxy=127.0.0.1,localhost,169.254.169.254,10.0.0.0/8,.internal
            EOT

            source /etc/bashrc

# VPC2 Private EC2 1
  VPC2Private1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:  ami-08c64544f5cfcddd0
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        # eth 0
        - DeviceIndex: 0
          SubnetId: !Ref VPC2SN1
          GroupSet: 
            - !Ref VPC2SG
          PrivateIpAddress: 10.20.1.10
      Tags:
        - Key: Name
          Value: VPC2-EC2-1
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
            hostnamectl set-hostname VPC2-Private1

            cat <<EOT>> /etc/bashrc
            export http_proxy=http://10.0.1.10:3128
            export https_proxy=https://10.0.1.10:3128
            no_proxy=127.0.0.1,localhost,169.254.169.254,10.0.0.0/8,.internal
            EOT

            source /etc/bashrc

# VPC2 Private EC2 2
  VPC2Private2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:  ami-08c64544f5cfcddd0
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
        # eth 0
        - DeviceIndex: 0
          SubnetId: !Ref VPC2SN2
          GroupSet: 
            - !Ref VPC2SG
          PrivateIpAddress: 10.20.2.10
      Tags:
        - Key: Name
          Value: VPC2-EC2-2
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            (
            echo "qwe123"
            echo "qwe123"
            ) | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            service sshd restart
            hostnamectl set-hostname VPC2-Private2

            cat <<EOT>> /etc/bashrc
            export http_proxy=http://10.0.1.10:3128
            export https_proxy=https://10.0.1.10:3128
            no_proxy=127.0.0.1,localhost,169.254.169.254,10.0.0.0/8,.internal
            EOT

            source /etc/bashrc

  InterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPC0EndpointSG
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.cloudformation'
      SubnetIds:
        - !Ref VPC0SN1
        - !Ref VPC0SN2
      VpcEndpointType: Interface
      VpcId: !Ref VPC0

# ------------- Transit Gateway -------------#
  TGW:
    Type: AWS::EC2::TransitGateway
    Properties:
      Tags:
       - Key: Name
         Value: TGW

  TGWAttach0:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref VPC0SN3
        - !Ref VPC0SN4
      Tags:
        - Key: Name
          Value: VPC0-Attach
      TransitGatewayId: !Ref TGW
      VpcId: !Ref VPC0

  TGWAttach1:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds: 
        - !Ref VPC1SN3
        - !Ref VPC1SN4
      Tags:
        - Key: Name
          Value: VPC1-Attach
      TransitGatewayId: !Ref TGW
      VpcId: !Ref VPC1

  TGWAttach2:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds: 
        - !Ref VPC2SN3
        - !Ref VPC2SN4
      Tags:
        - Key: Name
          Value: VPC2-Attach
      TransitGatewayId: !Ref TGW
      VpcId: !Ref VPC2

  VPC0TGWRoute:
    Type: AWS::EC2::Route
    DependsOn: TGWAttach0
    Properties:
      DestinationCidrBlock: 10.0.0.0/8
      RouteTableId: !Ref VPC0RT1 
      TransitGatewayId: !Ref TGW

  VPC1TGWRoute:
    Type: AWS::EC2::Route
    DependsOn: TGWAttach1
    Properties:
      DestinationCidrBlock: 10.0.0.0/8
      RouteTableId: !Ref VPC1RT1 
      TransitGatewayId: !Ref TGW

  VPC2TGWRoute:
    Type: AWS::EC2::Route
    DependsOn: TGWAttach2
    Properties:
      DestinationCidrBlock: 10.0.0.0/8
      RouteTableId: !Ref VPC2RT1 
      TransitGatewayId: !Ref TGW

# Red, Blue를 생성할 때 기본 TGW 라우팅테이블 VPC1과 2 연결은 콘솔에서 지운다.
  TGWBlueRT:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      Tags:
        - Key: Name
          Value: TGW-Blue-RT
      TransitGatewayId: !Ref TGW

  TGWRedRT:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      Tags:
        - Key: Name
          Value: TGW-Red-RT
      TransitGatewayId: !Ref TGW

  VPC1BlueAssociate:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TGWAttach1
      TransitGatewayRouteTableId: !Ref TGWBlueRT

  VPC2RedAssociate:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TGWAttach2
      TransitGatewayRouteTableId: !Ref TGWRedRT

  VPC0BluePropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref TGWAttach0
      TransitGatewayRouteTableId: !Ref TGWBlueRT

  VPC1BluePropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref TGWAttach1
      TransitGatewayRouteTableId: !Ref TGWBlueRT

  VPC0RedPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref TGWAttach0
      TransitGatewayRouteTableId: !Ref TGWRedRT

  VPC2RedPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref TGWAttach2
      TransitGatewayRouteTableId: !Ref TGWRedRT

# ------------------- Black Hole -------------------
# 기본으로 생성되는 TGW RT를 참조해야하기 때문에 직접 ID를 가져온다.
  RedBlackhole:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      Blackhole: true
      DestinationCidrBlock: 10.20.2.0/24
      TransitGatewayRouteTableId: tgw-rtb-05e4cc6e83655e988
